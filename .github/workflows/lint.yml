name: Linting and Formatting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '24'
  FLUTTER_VERSION: '3.35.4'

jobs:
  # Linting Backend
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./backend
        run: npx prettier --check "src/**/*.{ts,js,json}"

      - name: Check TypeScript
        working-directory: ./backend
        run: npx tsc --noEmit

  # Linting Frontend
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Run Flutter analyze
        working-directory: ./frontend
        run: flutter analyze

      - name: Check Flutter formatting
        working-directory: ./frontend
        run: dart format --output=none --set-exit-if-changed .

  # Auto-fix formatting (seulement sur les PRs)
  auto-format:
    name: Auto-format Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Format backend code
        working-directory: ./backend
        run: npx prettier --write "src/**/*.{ts,js,json}"

      - name: Format frontend code
        working-directory: ./frontend
        run: dart format .

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "ü§ñ Auto-format code [skip ci]"
          git push

  # Comment sur les PRs avec les r√©sultats
  comment-results:
    name: Comment Results
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-lint]
    if: github.event_name == 'pull_request'

    steps:
      - name: Comment success
        if: ${{ needs.backend-lint.result == 'success' && needs.frontend-lint.result == 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ **Linting passed!** All code style checks are successful.'
            })

      - name: Comment failure
        if: ${{ needs.backend-lint.result == 'failure' || needs.frontend-lint.result == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Linting failed!** Please check the logs and fix the code style issues.'
            })
