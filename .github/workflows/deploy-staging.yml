name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - preview

env:
  NODE_VERSION: '24'
  FLUTTER_VERSION: '3.35.4'

jobs:
  # Build et test avant déploiement
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: techplus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:8
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techplus_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          STRIPE_SECRET_KEY: sk_test_fake_key

      - name: Run frontend tests
        working-directory: ./frontend
        run: flutter test --coverage

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: flutter build web --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: |
            backend/dist/
            frontend/build/web/
          retention-days: 7

  # Déploiement avec Docker
  deploy-docker:
    name: Deploy with Docker
    runs-on: ubuntu-latest
    needs: [pre-deploy]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/techplus-backend:staging
            ${{ secrets.DOCKER_USERNAME }}/techplus-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/techplus-frontend:staging
            ${{ secrets.DOCKER_USERNAME }}/techplus-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Déploiement sur serveur (exemple avec SSH)
  deploy-server:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [deploy-docker]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Mise à jour du code
            cd /var/www/techplus
            git pull origin main
            
            # Arrêt des services
            docker-compose down
            
            # Mise à jour des images
            docker-compose pull
            
            # Redémarrage des services
            docker-compose up -d
            
            # Vérification de la santé
            sleep 30
            curl -f http://localhost:3000/health || exit 1
            curl -f http://localhost:80 || exit 1
            
            echo "✅ Deployment successful!"

  # Tests de santé post-déploiement
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-server]

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check backend health
        run: |
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/health || exit 1
          echo "✅ Backend is healthy"

      - name: Check frontend availability
        run: |
          curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
          echo "✅ Frontend is accessible"

      - name: Run smoke tests
        run: |
          # Tests de base pour vérifier que l'application fonctionne
          echo "Running smoke tests..."
          
          # Test de la page d'accueil
          curl -s ${{ secrets.STAGING_FRONTEND_URL }} | grep -q "TechPlus" || exit 1
          
          # Test de l'API
          curl -s ${{ secrets.STAGING_BACKEND_URL }}/api/health | grep -q "healthy" || exit 1
          
          echo "✅ Smoke tests passed"

  # Notification de déploiement
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.health-check.result == 'success' }}
        run: |
          echo "🎉 **Deployment to staging successful!**"
          echo "🌐 Frontend: ${{ secrets.STAGING_FRONTEND_URL }}"
          echo "🔧 Backend: ${{ secrets.STAGING_BACKEND_URL }}"
          echo "📊 Health check: ✅ All systems operational"

      - name: Notify failure
        if: ${{ needs.health-check.result == 'failure' }}
        run: |
          echo "❌ **Deployment to staging failed!**"
          echo "Please check the logs and fix the issues."
          exit 1

      - name: Create deployment summary
        run: |
          echo "# 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.health-check.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "## 🌐 Access URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend:** ${{ secrets.STAGING_FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Backend API:** ${{ secrets.STAGING_BACKEND_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Health Check:** ${{ secrets.STAGING_BACKEND_URL }}/health" >> $GITHUB_STEP_SUMMARY
          fi
