// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  avatar    String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reservations Reservation[]
  oauthAccounts OAuthAccount[]

  @@map("users")
}

model OAuthAccount {
  id       String @id @default(cuid())
  provider String
  providerId String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

model Restaurant {
  id          String @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String
  email       String
  website     String?
  logo        String?
  images      String[]
  settings    Json?
  
  // Configuration paiements
  averagePricePerPerson Decimal @default(25.00)
  minimumDepositAmount  Decimal @default(10.00)
  paymentThreshold      Int     @default(6)
  cancellationPolicy    String? // Politique d'annulation (24h)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tables      Table[]
  menuItems   MenuItem[]
  reservations Reservation[]

  @@map("restaurants")
}

model Table {
  id           String @id @default(cuid())
  number       Int
  capacity     Int
  position     String?
  isActive     Boolean @default(true)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Relations
  reservations Reservation[]

  @@unique([restaurantId, number])
  @@map("tables")
}

model Reservation {
  id           String @id @default(cuid())
  date         DateTime
  time         String
  duration     Int // en minutes
  partySize    Int
  status       ReservationStatus @default(PENDING)
  notes        String?
  specialRequests String?
  
  // Client info (pour les r√©servations sans compte)
  clientName   String?
  clientEmail  String?
  clientPhone  String?
  
  // Token de gestion pour les guests
  managementToken String? @unique
  tokenExpiresAt  DateTime?
  
  // Notes internes admin
  adminNotes   String?
  cancellationReason String?
  
  // Paiement
  requiresPayment Boolean @default(false)
  estimatedAmount Decimal?
  depositAmount   Decimal?
  paymentStatus   PaymentStatus @default(NONE)
  stripePaymentId String?
  
  // Relations
  userId       String?
  user         User? @relation(fields: [userId], references: [id])
  tableId      String?
  table        Table? @relation(fields: [tableId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("reservations")
}

model MenuItem {
  id           String @id @default(cuid())
  name         String
  description  String?
  price        Decimal
  category     String
  image        String?
  isAvailable  Boolean @default(true)
  allergens    String[]
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("menu_items")
}

model Analytics {
  id           String @id @default(cuid())
  date         DateTime
  metric       String
  value        Decimal
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())

  @@unique([restaurantId, date, metric])
  @@map("analytics")
}

enum UserRole {
  CLIENT
  ADMIN
  SUPER_ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  NONE
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
